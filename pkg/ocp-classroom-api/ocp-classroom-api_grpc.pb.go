// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ocp_classroom_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcpClassroomApiClient is the client API for OcpClassroomApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcpClassroomApiClient interface {
	// Возвращает описание задачи по ее идентификатору
	DescribeClassroom(ctx context.Context, in *DescribeClassroomRequest, opts ...grpc.CallOption) (*DescribeClassroomResponse, error)
}

type ocpClassroomApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOcpClassroomApiClient(cc grpc.ClientConnInterface) OcpClassroomApiClient {
	return &ocpClassroomApiClient{cc}
}

func (c *ocpClassroomApiClient) DescribeClassroom(ctx context.Context, in *DescribeClassroomRequest, opts ...grpc.CallOption) (*DescribeClassroomResponse, error) {
	out := new(DescribeClassroomResponse)
	err := c.cc.Invoke(ctx, "/ocp.classroom.api.OcpClassroomApi/DescribeClassroom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcpClassroomApiServer is the server API for OcpClassroomApi service.
// All implementations must embed UnimplementedOcpClassroomApiServer
// for forward compatibility
type OcpClassroomApiServer interface {
	// Возвращает описание задачи по ее идентификатору
	DescribeClassroom(context.Context, *DescribeClassroomRequest) (*DescribeClassroomResponse, error)
	mustEmbedUnimplementedOcpClassroomApiServer()
}

// UnimplementedOcpClassroomApiServer must be embedded to have forward compatible implementations.
type UnimplementedOcpClassroomApiServer struct {
}

func (UnimplementedOcpClassroomApiServer) DescribeClassroom(context.Context, *DescribeClassroomRequest) (*DescribeClassroomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeClassroom not implemented")
}
func (UnimplementedOcpClassroomApiServer) mustEmbedUnimplementedOcpClassroomApiServer() {}

// UnsafeOcpClassroomApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcpClassroomApiServer will
// result in compilation errors.
type UnsafeOcpClassroomApiServer interface {
	mustEmbedUnimplementedOcpClassroomApiServer()
}

func RegisterOcpClassroomApiServer(s grpc.ServiceRegistrar, srv OcpClassroomApiServer) {
	s.RegisterService(&OcpClassroomApi_ServiceDesc, srv)
}

func _OcpClassroomApi_DescribeClassroom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeClassroomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpClassroomApiServer).DescribeClassroom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.classroom.api.OcpClassroomApi/DescribeClassroom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpClassroomApiServer).DescribeClassroom(ctx, req.(*DescribeClassroomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OcpClassroomApi_ServiceDesc is the grpc.ServiceDesc for OcpClassroomApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcpClassroomApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocp.classroom.api.OcpClassroomApi",
	HandlerType: (*OcpClassroomApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeClassroom",
			Handler:    _OcpClassroomApi_DescribeClassroom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ocp-classroom-api/ocp-classroom-api.proto",
}
