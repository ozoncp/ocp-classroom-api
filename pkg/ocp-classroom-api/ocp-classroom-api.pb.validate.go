// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/ocp-classroom-api/ocp-classroom-api.proto

package ocp_classroom_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on ListClassroomsV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListClassroomsV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetLimit() <= 0 {
		return ListClassroomsV1RequestValidationError{
			field:  "Limit",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for Offset

	return nil
}

// ListClassroomsV1RequestValidationError is the validation error returned by
// ListClassroomsV1Request.Validate if the designated constraints aren't met.
type ListClassroomsV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClassroomsV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClassroomsV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClassroomsV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClassroomsV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClassroomsV1RequestValidationError) ErrorName() string {
	return "ListClassroomsV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListClassroomsV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClassroomsV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClassroomsV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClassroomsV1RequestValidationError{}

// Validate checks the field values on ListClassroomsV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListClassroomsV1Response) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetClassrooms() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListClassroomsV1ResponseValidationError{
					field:  fmt.Sprintf("Classrooms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListClassroomsV1ResponseValidationError is the validation error returned by
// ListClassroomsV1Response.Validate if the designated constraints aren't met.
type ListClassroomsV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClassroomsV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClassroomsV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClassroomsV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClassroomsV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClassroomsV1ResponseValidationError) ErrorName() string {
	return "ListClassroomsV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListClassroomsV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClassroomsV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClassroomsV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClassroomsV1ResponseValidationError{}

// Validate checks the field values on DescribeClassroomV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeClassroomV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetClassroomId() <= 0 {
		return DescribeClassroomV1RequestValidationError{
			field:  "ClassroomId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// DescribeClassroomV1RequestValidationError is the validation error returned
// by DescribeClassroomV1Request.Validate if the designated constraints aren't met.
type DescribeClassroomV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeClassroomV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeClassroomV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeClassroomV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeClassroomV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeClassroomV1RequestValidationError) ErrorName() string {
	return "DescribeClassroomV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeClassroomV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeClassroomV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeClassroomV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeClassroomV1RequestValidationError{}

// Validate checks the field values on DescribeClassroomV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeClassroomV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetClassroom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeClassroomV1ResponseValidationError{
				field:  "Classroom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribeClassroomV1ResponseValidationError is the validation error returned
// by DescribeClassroomV1Response.Validate if the designated constraints
// aren't met.
type DescribeClassroomV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeClassroomV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeClassroomV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeClassroomV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeClassroomV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeClassroomV1ResponseValidationError) ErrorName() string {
	return "DescribeClassroomV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeClassroomV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeClassroomV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeClassroomV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeClassroomV1ResponseValidationError{}

// Validate checks the field values on CreateClassroomV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateClassroomV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetTenantId() <= 0 {
		return CreateClassroomV1RequestValidationError{
			field:  "TenantId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetCalendarId() <= 0 {
		return CreateClassroomV1RequestValidationError{
			field:  "CalendarId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// CreateClassroomV1RequestValidationError is the validation error returned by
// CreateClassroomV1Request.Validate if the designated constraints aren't met.
type CreateClassroomV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateClassroomV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateClassroomV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateClassroomV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateClassroomV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateClassroomV1RequestValidationError) ErrorName() string {
	return "CreateClassroomV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateClassroomV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateClassroomV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateClassroomV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateClassroomV1RequestValidationError{}

// Validate checks the field values on CreateClassroomV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateClassroomV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ClassroomId

	return nil
}

// CreateClassroomV1ResponseValidationError is the validation error returned by
// CreateClassroomV1Response.Validate if the designated constraints aren't met.
type CreateClassroomV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateClassroomV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateClassroomV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateClassroomV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateClassroomV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateClassroomV1ResponseValidationError) ErrorName() string {
	return "CreateClassroomV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateClassroomV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateClassroomV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateClassroomV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateClassroomV1ResponseValidationError{}

// Validate checks the field values on MultiCreateClassroomV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateClassroomV1Request) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetClassrooms() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiCreateClassroomV1RequestValidationError{
					field:  fmt.Sprintf("Classrooms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MultiCreateClassroomV1RequestValidationError is the validation error
// returned by MultiCreateClassroomV1Request.Validate if the designated
// constraints aren't met.
type MultiCreateClassroomV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateClassroomV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateClassroomV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateClassroomV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateClassroomV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateClassroomV1RequestValidationError) ErrorName() string {
	return "MultiCreateClassroomV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateClassroomV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateClassroomV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateClassroomV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateClassroomV1RequestValidationError{}

// Validate checks the field values on MultiCreateClassroomV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateClassroomV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CreatedCount

	return nil
}

// MultiCreateClassroomV1ResponseValidationError is the validation error
// returned by MultiCreateClassroomV1Response.Validate if the designated
// constraints aren't met.
type MultiCreateClassroomV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateClassroomV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateClassroomV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateClassroomV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateClassroomV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateClassroomV1ResponseValidationError) ErrorName() string {
	return "MultiCreateClassroomV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateClassroomV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateClassroomV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateClassroomV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateClassroomV1ResponseValidationError{}

// Validate checks the field values on UpdateClassroomV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateClassroomV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetClassroom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateClassroomV1RequestValidationError{
				field:  "Classroom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateClassroomV1RequestValidationError is the validation error returned by
// UpdateClassroomV1Request.Validate if the designated constraints aren't met.
type UpdateClassroomV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateClassroomV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateClassroomV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateClassroomV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateClassroomV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateClassroomV1RequestValidationError) ErrorName() string {
	return "UpdateClassroomV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateClassroomV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateClassroomV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateClassroomV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateClassroomV1RequestValidationError{}

// Validate checks the field values on UpdateClassroomV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateClassroomV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Found

	return nil
}

// UpdateClassroomV1ResponseValidationError is the validation error returned by
// UpdateClassroomV1Response.Validate if the designated constraints aren't met.
type UpdateClassroomV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateClassroomV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateClassroomV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateClassroomV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateClassroomV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateClassroomV1ResponseValidationError) ErrorName() string {
	return "UpdateClassroomV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateClassroomV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateClassroomV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateClassroomV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateClassroomV1ResponseValidationError{}

// Validate checks the field values on RemoveClassroomV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveClassroomV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetClassroomId() <= 0 {
		return RemoveClassroomV1RequestValidationError{
			field:  "ClassroomId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// RemoveClassroomV1RequestValidationError is the validation error returned by
// RemoveClassroomV1Request.Validate if the designated constraints aren't met.
type RemoveClassroomV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveClassroomV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveClassroomV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveClassroomV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveClassroomV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveClassroomV1RequestValidationError) ErrorName() string {
	return "RemoveClassroomV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveClassroomV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveClassroomV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveClassroomV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveClassroomV1RequestValidationError{}

// Validate checks the field values on RemoveClassroomV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveClassroomV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Found

	return nil
}

// RemoveClassroomV1ResponseValidationError is the validation error returned by
// RemoveClassroomV1Response.Validate if the designated constraints aren't met.
type RemoveClassroomV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveClassroomV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveClassroomV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveClassroomV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveClassroomV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveClassroomV1ResponseValidationError) ErrorName() string {
	return "RemoveClassroomV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveClassroomV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveClassroomV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveClassroomV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveClassroomV1ResponseValidationError{}

// Validate checks the field values on Classroom with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Classroom) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetClassroomId() <= 0 {
		return ClassroomValidationError{
			field:  "ClassroomId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetTenantId() <= 0 {
		return ClassroomValidationError{
			field:  "TenantId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetCalendarId() <= 0 {
		return ClassroomValidationError{
			field:  "CalendarId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// ClassroomValidationError is the validation error returned by
// Classroom.Validate if the designated constraints aren't met.
type ClassroomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClassroomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClassroomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClassroomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClassroomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClassroomValidationError) ErrorName() string { return "ClassroomValidationError" }

// Error satisfies the builtin error interface
func (e ClassroomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClassroom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClassroomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClassroomValidationError{}
