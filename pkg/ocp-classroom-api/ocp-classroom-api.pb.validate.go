// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/ocp-classroom-api/ocp-classroom-api.proto

package ocp_classroom_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on DescribeClassroomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeClassroomRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ClassroomId

	// no validation rules for Verbose

	return nil
}

// DescribeClassroomRequestValidationError is the validation error returned by
// DescribeClassroomRequest.Validate if the designated constraints aren't met.
type DescribeClassroomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeClassroomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeClassroomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeClassroomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeClassroomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeClassroomRequestValidationError) ErrorName() string {
	return "DescribeClassroomRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeClassroomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeClassroomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeClassroomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeClassroomRequestValidationError{}

// Validate checks the field values on DescribeClassroomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeClassroomResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetClassroom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeClassroomResponseValidationError{
				field:  "Classroom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribeClassroomResponseValidationError is the validation error returned by
// DescribeClassroomResponse.Validate if the designated constraints aren't met.
type DescribeClassroomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeClassroomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeClassroomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeClassroomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeClassroomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeClassroomResponseValidationError) ErrorName() string {
	return "DescribeClassroomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeClassroomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeClassroomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeClassroomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeClassroomResponseValidationError{}

// Validate checks the field values on Classroom with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Classroom) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ClassroomId

	// no validation rules for TenantId

	// no validation rules for CalendarId

	return nil
}

// ClassroomValidationError is the validation error returned by
// Classroom.Validate if the designated constraints aren't met.
type ClassroomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClassroomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClassroomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClassroomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClassroomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClassroomValidationError) ErrorName() string { return "ClassroomValidationError" }

// Error satisfies the builtin error interface
func (e ClassroomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClassroom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClassroomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClassroomValidationError{}
